//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 21 files.
  struct file {
    /// Resource file `Lato-Bold.ttf`.
    static let latoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Bold", pathExtension: "ttf")
    /// Resource file `Poppins-Bold.ttf`.
    static let poppinsBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Bold", pathExtension: "ttf")
    /// Resource file `Poppins-Regular.ttf`.
    static let poppinsRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Regular", pathExtension: "ttf")
    /// Resource file `Raleway-Black.ttf`.
    static let ralewayBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-Black", pathExtension: "ttf")
    /// Resource file `Raleway-BlackItalic.ttf`.
    static let ralewayBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-BlackItalic", pathExtension: "ttf")
    /// Resource file `Raleway-Bold.ttf`.
    static let ralewayBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-Bold", pathExtension: "ttf")
    /// Resource file `Raleway-BoldItalic.ttf`.
    static let ralewayBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-BoldItalic", pathExtension: "ttf")
    /// Resource file `Raleway-ExtraBold.ttf`.
    static let ralewayExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-ExtraBold", pathExtension: "ttf")
    /// Resource file `Raleway-ExtraBoldItalic.ttf`.
    static let ralewayExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Raleway-ExtraLight.ttf`.
    static let ralewayExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-ExtraLight", pathExtension: "ttf")
    /// Resource file `Raleway-ExtraLightItalic.ttf`.
    static let ralewayExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Raleway-Italic.ttf`.
    static let ralewayItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-Italic", pathExtension: "ttf")
    /// Resource file `Raleway-Light.ttf`.
    static let ralewayLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-Light", pathExtension: "ttf")
    /// Resource file `Raleway-LightItalic.ttf`.
    static let ralewayLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-LightItalic", pathExtension: "ttf")
    /// Resource file `Raleway-Medium.ttf`.
    static let ralewayMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-Medium", pathExtension: "ttf")
    /// Resource file `Raleway-MediumItalic.ttf`.
    static let ralewayMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-MediumItalic", pathExtension: "ttf")
    /// Resource file `Raleway-Regular.ttf`.
    static let ralewayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-Regular", pathExtension: "ttf")
    /// Resource file `Raleway-SemiBold.ttf`.
    static let ralewaySemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-SemiBold", pathExtension: "ttf")
    /// Resource file `Raleway-SemiBoldItalic.ttf`.
    static let ralewaySemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Raleway-Thin.ttf`.
    static let ralewayThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-Thin", pathExtension: "ttf")
    /// Resource file `Raleway-ThinItalic.ttf`.
    static let ralewayThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Raleway-ThinItalic", pathExtension: "ttf")

    /// `bundle.url(forResource: "Lato-Bold", withExtension: "ttf")`
    static func latoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Bold", withExtension: "ttf")`
    static func poppinsBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Regular", withExtension: "ttf")`
    static func poppinsRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-Black", withExtension: "ttf")`
    static func ralewayBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-BlackItalic", withExtension: "ttf")`
    static func ralewayBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-Bold", withExtension: "ttf")`
    static func ralewayBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-BoldItalic", withExtension: "ttf")`
    static func ralewayBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-ExtraBold", withExtension: "ttf")`
    static func ralewayExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-ExtraBoldItalic", withExtension: "ttf")`
    static func ralewayExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-ExtraLight", withExtension: "ttf")`
    static func ralewayExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-ExtraLightItalic", withExtension: "ttf")`
    static func ralewayExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-Italic", withExtension: "ttf")`
    static func ralewayItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-Light", withExtension: "ttf")`
    static func ralewayLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-LightItalic", withExtension: "ttf")`
    static func ralewayLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-Medium", withExtension: "ttf")`
    static func ralewayMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-MediumItalic", withExtension: "ttf")`
    static func ralewayMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-Regular", withExtension: "ttf")`
    static func ralewayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-SemiBold", withExtension: "ttf")`
    static func ralewaySemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewaySemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-SemiBoldItalic", withExtension: "ttf")`
    static func ralewaySemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewaySemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-Thin", withExtension: "ttf")`
    static func ralewayThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Raleway-ThinItalic", withExtension: "ttf")`
    static func ralewayThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ralewayThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 21 fonts.
  struct font: Rswift.Validatable {
    /// Font `Lato-Bold`.
    static let latoBold = Rswift.FontResource(fontName: "Lato-Bold")
    /// Font `Poppins-Bold`.
    static let poppinsBold = Rswift.FontResource(fontName: "Poppins-Bold")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")
    /// Font `Raleway-BlackItalic`.
    static let ralewayBlackItalic = Rswift.FontResource(fontName: "Raleway-BlackItalic")
    /// Font `Raleway-Black`.
    static let ralewayBlack = Rswift.FontResource(fontName: "Raleway-Black")
    /// Font `Raleway-BoldItalic`.
    static let ralewayBoldItalic = Rswift.FontResource(fontName: "Raleway-BoldItalic")
    /// Font `Raleway-Bold`.
    static let ralewayBold = Rswift.FontResource(fontName: "Raleway-Bold")
    /// Font `Raleway-ExtraBoldItalic`.
    static let ralewayExtraBoldItalic = Rswift.FontResource(fontName: "Raleway-ExtraBoldItalic")
    /// Font `Raleway-ExtraBold`.
    static let ralewayExtraBold = Rswift.FontResource(fontName: "Raleway-ExtraBold")
    /// Font `Raleway-ExtraLightItalic`.
    static let ralewayExtraLightItalic = Rswift.FontResource(fontName: "Raleway-ExtraLightItalic")
    /// Font `Raleway-ExtraLight`.
    static let ralewayExtraLight = Rswift.FontResource(fontName: "Raleway-ExtraLight")
    /// Font `Raleway-Italic`.
    static let ralewayItalic = Rswift.FontResource(fontName: "Raleway-Italic")
    /// Font `Raleway-LightItalic`.
    static let ralewayLightItalic = Rswift.FontResource(fontName: "Raleway-LightItalic")
    /// Font `Raleway-Light`.
    static let ralewayLight = Rswift.FontResource(fontName: "Raleway-Light")
    /// Font `Raleway-MediumItalic`.
    static let ralewayMediumItalic = Rswift.FontResource(fontName: "Raleway-MediumItalic")
    /// Font `Raleway-Medium`.
    static let ralewayMedium = Rswift.FontResource(fontName: "Raleway-Medium")
    /// Font `Raleway-Regular`.
    static let ralewayRegular = Rswift.FontResource(fontName: "Raleway-Regular")
    /// Font `Raleway-SemiBoldItalic`.
    static let ralewaySemiBoldItalic = Rswift.FontResource(fontName: "Raleway-SemiBoldItalic")
    /// Font `Raleway-SemiBold`.
    static let ralewaySemiBold = Rswift.FontResource(fontName: "Raleway-SemiBold")
    /// Font `Raleway-ThinItalic`.
    static let ralewayThinItalic = Rswift.FontResource(fontName: "Raleway-ThinItalic")
    /// Font `Raleway-Thin`.
    static let ralewayThin = Rswift.FontResource(fontName: "Raleway-Thin")

    /// `UIFont(name: "Lato-Bold", size: ...)`
    static func latoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBold, size: size)
    }

    /// `UIFont(name: "Poppins-Bold", size: ...)`
    static func poppinsBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBold, size: size)
    }

    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }

    /// `UIFont(name: "Raleway-Black", size: ...)`
    static func ralewayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayBlack, size: size)
    }

    /// `UIFont(name: "Raleway-BlackItalic", size: ...)`
    static func ralewayBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayBlackItalic, size: size)
    }

    /// `UIFont(name: "Raleway-Bold", size: ...)`
    static func ralewayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayBold, size: size)
    }

    /// `UIFont(name: "Raleway-BoldItalic", size: ...)`
    static func ralewayBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayBoldItalic, size: size)
    }

    /// `UIFont(name: "Raleway-ExtraBold", size: ...)`
    static func ralewayExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayExtraBold, size: size)
    }

    /// `UIFont(name: "Raleway-ExtraBoldItalic", size: ...)`
    static func ralewayExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Raleway-ExtraLight", size: ...)`
    static func ralewayExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayExtraLight, size: size)
    }

    /// `UIFont(name: "Raleway-ExtraLightItalic", size: ...)`
    static func ralewayExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Raleway-Italic", size: ...)`
    static func ralewayItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayItalic, size: size)
    }

    /// `UIFont(name: "Raleway-Light", size: ...)`
    static func ralewayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayLight, size: size)
    }

    /// `UIFont(name: "Raleway-LightItalic", size: ...)`
    static func ralewayLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayLightItalic, size: size)
    }

    /// `UIFont(name: "Raleway-Medium", size: ...)`
    static func ralewayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayMedium, size: size)
    }

    /// `UIFont(name: "Raleway-MediumItalic", size: ...)`
    static func ralewayMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayMediumItalic, size: size)
    }

    /// `UIFont(name: "Raleway-Regular", size: ...)`
    static func ralewayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayRegular, size: size)
    }

    /// `UIFont(name: "Raleway-SemiBold", size: ...)`
    static func ralewaySemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewaySemiBold, size: size)
    }

    /// `UIFont(name: "Raleway-SemiBoldItalic", size: ...)`
    static func ralewaySemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewaySemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Raleway-Thin", size: ...)`
    static func ralewayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayThin, size: size)
    }

    /// `UIFont(name: "Raleway-ThinItalic", size: ...)`
    static func ralewayThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ralewayThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.latoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Bold' could not be loaded, is 'Lato-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Bold' could not be loaded, is 'Poppins-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Black' could not be loaded, is 'Raleway-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-BlackItalic' could not be loaded, is 'Raleway-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Bold' could not be loaded, is 'Raleway-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-BoldItalic' could not be loaded, is 'Raleway-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-ExtraBold' could not be loaded, is 'Raleway-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-ExtraBoldItalic' could not be loaded, is 'Raleway-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-ExtraLight' could not be loaded, is 'Raleway-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-ExtraLightItalic' could not be loaded, is 'Raleway-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Italic' could not be loaded, is 'Raleway-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Light' could not be loaded, is 'Raleway-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-LightItalic' could not be loaded, is 'Raleway-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Medium' could not be loaded, is 'Raleway-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-MediumItalic' could not be loaded, is 'Raleway-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Regular' could not be loaded, is 'Raleway-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewaySemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-SemiBold' could not be loaded, is 'Raleway-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewaySemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-SemiBoldItalic' could not be loaded, is 'Raleway-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-Thin' could not be loaded, is 'Raleway-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ralewayThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Raleway-ThinItalic' could not be loaded, is 'Raleway-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `backgroundSplash`.
    static let backgroundSplash = Rswift.ImageResource(bundle: R.hostingBundle, name: "backgroundSplash")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `photo`.
    static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo")
    /// Image `welcomeTop`.
    static let welcomeTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcomeTop")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backgroundSplash", bundle: ..., traitCollection: ...)`
    static func backgroundSplash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundSplash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcomeTop", bundle: ..., traitCollection: ...)`
    static func welcomeTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcomeTop, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      /// en translation: Example APP !!
      ///
      /// Locales: en, es
      static let splashViewControllerTitle = Rswift.StringResource(key: "splash.view.controller.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: List of games
      ///
      /// Locales: en, es
      static let homeViewControllerTitle = Rswift.StringResource(key: "home.view.controller.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: No results
      ///
      /// Locales: en
      static let generalNoResults = Rswift.StringResource(key: "general.no.results", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Now, you will be able to obtain information about many and many and many interesting video games. Enjoy it!!!. Now, you will be able to obtain information about many and many and many interesting video games. Enjoy it!!!. Now, you will be able to obtain information about many and many and many interesting video games. Enjoy it!!!. Now, you will be able to obtain information about many and many and many interesting video games. Enjoy it!!!. Now, you will be able to obtain information about many and many and many interesting video games. Enjoy it!!!
      ///
      /// Locales: en, es
      static let welcomeViewControllerExpain = Rswift.StringResource(key: "welcome.view.controller.expain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Start!
      ///
      /// Locales: en, es
      static let welcomeViewControllerButtonNext = Rswift.StringResource(key: "welcome.view.controller.button.next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Welcome to our APP
      ///
      /// Locales: en, es
      static let welcomeViewControllerTitle = Rswift.StringResource(key: "welcome.view.controller.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Example APP !!
      ///
      /// Locales: en, es
      static func splashViewControllerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("splash.view.controller.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "splash.view.controller.title"
        }

        return NSLocalizedString("splash.view.controller.title", bundle: bundle, comment: "")
      }

      /// en translation: List of games
      ///
      /// Locales: en, es
      static func homeViewControllerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home.view.controller.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home.view.controller.title"
        }

        return NSLocalizedString("home.view.controller.title", bundle: bundle, comment: "")
      }

      /// en translation: No results
      ///
      /// Locales: en
      static func generalNoResults(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.no.results", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.no.results"
        }

        return NSLocalizedString("general.no.results", bundle: bundle, comment: "")
      }

      /// en translation: Now, you will be able to obtain information about many and many and many interesting video games. Enjoy it!!!. Now, you will be able to obtain information about many and many and many interesting video games. Enjoy it!!!. Now, you will be able to obtain information about many and many and many interesting video games. Enjoy it!!!. Now, you will be able to obtain information about many and many and many interesting video games. Enjoy it!!!. Now, you will be able to obtain information about many and many and many interesting video games. Enjoy it!!!
      ///
      /// Locales: en, es
      static func welcomeViewControllerExpain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welcome.view.controller.expain", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welcome.view.controller.expain"
        }

        return NSLocalizedString("welcome.view.controller.expain", bundle: bundle, comment: "")
      }

      /// en translation: Start!
      ///
      /// Locales: en, es
      static func welcomeViewControllerButtonNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welcome.view.controller.button.next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welcome.view.controller.button.next"
        }

        return NSLocalizedString("welcome.view.controller.button.next", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to our APP
      ///
      /// Locales: en, es
      static func welcomeViewControllerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welcome.view.controller.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welcome.view.controller.title"
        }

        return NSLocalizedString("welcome.view.controller.title", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
